version: "3.8"

services:
  # --------------------------------------------------------------------------
  # AUTH SERVICE
  # --------------------------------------------------------------------------
  auth-service:
    container_name: auth-service
    build: ./auth-service
    ports:
      - "8001:8000"
    env_file:
      - ./auth-service/.env
    depends_on:
      auth-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

  auth-db:
    container_name: auth-db
    image: postgres:14-alpine
    env_file:
      - ./auth-service/.env
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # --------------------------------------------------------------------------
  # EVENTS SERVICE
  # --------------------------------------------------------------------------
  events-service:
    container_name: events-service
    build: ./events-service
    ports:
      - "8002:8000"
    env_file:
      - ./events-service/.env
    depends_on:
      events-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

  events-db:
    container_name: events-db
    image: postgres:14-alpine
    env_file:
      - ./events-service/.env
    volumes:
      - events-db-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # --------------------------------------------------------------------------
  # TICKETS SERVICE
  # --------------------------------------------------------------------------
  tickets-service:
    container_name: tickets-service
    build: ./tickets-service
    ports:
      - "8003:8000"
    env_file:
      - ./tickets-service/.env
    depends_on:
      tickets-db:
        condition: service_healthy
      events-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

  tickets-db:
    container_name: tickets-db
    image: postgres:14-alpine
    env_file:
      - ./tickets-service/.env
    volumes:
      - tickets-db-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # --------------------------------------------------------------------------
  # STRIPE WRAPPER SERVICE
  # --------------------------------------------------------------------------
  payments:
    build: ./stripe-service
    ports:
      - "8004:8000"
    environment:
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    volumes:
      - ./stripe-service:/app

volumes:
  auth-db-data:
  events-db-data:
  tickets-db-data:
