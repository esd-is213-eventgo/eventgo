# will need to push images to dockerhub once finilised but this is the kubernetes manifest template for the microservices
---
# Auth Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
    spec:
      containers:
        - name: auth-service
          image: auth-service:latest
          ports:
            - containerPort: 8000
          envFrom:
            - configMapRef:
                name: auth-service-config
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 5
---
# Auth Service ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: auth-service-config
  labels:
    app: auth-service
---
# Auth Service Service
apiVersion: v1
kind: Service
metadata:
  name: auth-service
spec:
  selector:
    app: auth-service
  ports:
    - protocol: TCP
      port: 8001
      targetPort: 8000
---
# Auth DB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-db
  template:
    metadata:
      labels:
        app: auth-db
    spec:
      containers:
        - name: auth-db
          image: postgres:14-alpine
          envFrom:
            - configMapRef:
                name: auth-db-config
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: auth-db-storage
      volumes:
        - name: auth-db-storage
          persistentVolumeClaim:
            claimName: auth-db-pvc
---
# Auth DB PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: auth-db-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Auth DB Service
apiVersion: v1
kind: Service
metadata:
  name: auth-db
spec:
  selector:
    app: auth-db
  ports:
    - protocol: TCP
      port: 5432
---
# Events Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: events-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: events-service
  template:
    metadata:
      labels:
        app: events-service
    spec:
      containers:
        - name: events-service
          image: events-service:latest
          ports:
            - containerPort: 8000
          envFrom:
            - configMapRef:
                name: events-service-config
---
# Events Service Service
apiVersion: v1
kind: Service
metadata:
  name: events-service
spec:
  selector:
    app: events-service
  ports:
    - protocol: TCP
      port: 8002
      targetPort: 8000
---
# Other Services (tickets-service, stripe-service) would follow similar patterns.
# template below:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
spec:
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp
        image: <Image>
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 8000 # set to default port

